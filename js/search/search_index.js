var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AdminAuthGuard.html",[0,0.493,1,1.813]],["body/injectables/AdminAuthGuard.html",[0,0.834,1,3.065,2,1.594,3,0.363,4,0.315,5,0.315,6,3.059,7,3.059,8,0.44,9,0.027,10,0.885,11,3.059,12,1.844,13,0.363,14,0.116,15,1.988,16,4.634,17,0.023,18,0.023]],["title/injectables/AdminStrategy.html",[0,0.493,19,1.984]],["body/injectables/AdminStrategy.html",[0,0.633,2,1.045,3,0.238,4,0.207,5,0.207,8,0.455,9,0.028,10,0.58,12,1.209,13,0.238,14,0.076,15,1.304,17,0.017,18,0.017,19,2.547,20,2.559,21,0.413,22,1.465,23,2.468,24,3.142,25,1.66,26,2.242,27,3.185,28,0.813,29,3.039,30,1.695,31,1.269,32,0.58,33,1.695,34,3.142,35,3.585,36,3.039,37,3.142,38,1.045,39,1.66,40,1.817,41,2.811,42,1.817,43,0.973,44,2.242,45,2.559,46,2.242,47,2.006,48,2.242,49,2.598,50,1.817,51,2.006,52,1.66,53,2.242,54,4.258,55,2.559,56,1.817,57,2.242,58,3.585,59,2.242,60,2.559,61,2.559,62,1.826,63,2.138,64,1.526,65,2.242,66,2.811,67,2.138,68,2.559,69,3.039,70,1.045]],["title/controllers/AppController.html",[71,1.423,72,2.448]],["body/controllers/AppController.html",[3,0.313,4,0.272,5,0.272,8,0.442,9,0.028,10,0.764,13,0.313,14,0.1,17,0.021,18,0.021,21,0.543,22,1.762,28,0.764,38,1.377,70,1.377,71,2.197,72,3.779,73,1.716,74,3.369,75,5.013,76,1.377,77,4.002,78,1.64,79,2.393,80,3.728,81,4.002,82,2.642,83,4.002,84,2.953,85,4.002,86,4.002,87,2.393,88,1.716,89,4.002]],["title/modules/AppModule.html",[90,1.537,91,2.19]],["body/modules/AppModule.html",[3,0.254,4,0.221,5,0.221,8,0.485,9,0.028,10,0.62,13,0.254,14,0.081,17,0.018,18,0.018,43,1.039,73,1.392,90,2.065,91,4.194,92,1.629,93,2.237,94,2.732,95,2.732,96,2.979,97,3.548,98,3.548,99,2.665,100,1.941,101,1.941,102,3.245,103,2.942,104,2.732,105,2.394,106,2.142,107,3.245,108,2.394,109,3.245,110,3.245,111,3.245,112,3.752,113,2.732,114,2.732,115,2.732,116,3.245,117,2.942,118,3.245,119,3.245,120,3.245,121,3.245,122,3.245,123,3.245,124,2.732,125,2.142]],["title/injectables/AppService.html",[0,0.493,80,2.19]],["body/injectables/AppService.html",[0,0.807,2,1.509,3,0.344,4,0.298,5,0.298,8,0.344,9,0.027,10,0.838,13,0.344,14,0.11,17,0.022,18,0.022,21,0.596,22,1.867,28,0.838,38,1.509,70,1.509,75,5.183,78,1.738,80,3.582,126,3.694,127,4.388,128,4.388,129,4.388]],["title/controllers/AuthController.html",[71,1.423,130,2.19]],["body/controllers/AuthController.html",[1,1.202,3,0.172,4,0.15,5,0.15,8,0.422,9,0.028,10,0.42,11,1.453,12,0.876,13,0.172,14,0.055,17,0.014,18,0.014,21,0.299,22,1.156,23,2.047,28,1.03,30,2.063,31,1.545,32,0.872,33,2.063,38,1.855,39,1.202,40,1.316,63,2.292,64,1.105,70,1.691,71,0.944,73,0.944,76,1.855,78,1.66,79,1.316,87,1.316,88,0.944,130,2.219,131,1.853,132,1.624,133,1.853,134,3.361,135,1.557,136,2.494,137,1.836,138,1.836,139,2.83,140,2.48,141,2.201,142,2.201,143,2.201,144,4.14,145,3.361,146,1.853,147,3.1,148,3.361,149,2.201,150,2.201,151,1.853,152,3.361,153,2.201,154,1.853,155,3.361,156,2.201,157,1.853,158,2.832,159,3.361,160,2.201,161,2.201,162,2.201,163,2.201,164,1.624,165,1.624,166,1.624,167,1.624,168,1.316,169,2.201,170,2.047,171,1.624,172,1.202,173,1.853,174,1.624,175,1.624,176,2.201,177,2.48,178,1.202,179,2.201,180,2.201,181,1.624,182,2.201,183,2.201,184,2.201,185,1.853,186,2.201,187,1.624,188,2.201,189,3.361,190,2.201,191,1.624,192,2.201,193,2.201,194,2.201,195,2.201,196,2.201,197,2.201]],["title/modules/AuthModule.html",[90,1.537,96,1.666]],["body/modules/AuthModule.html",[3,0.208,4,0.18,5,0.18,8,0.488,9,0.028,10,0.506,12,1.054,13,0.208,14,0.066,17,0.016,18,0.016,19,3.729,31,0.79,43,0.848,49,1.228,51,1.749,59,1.955,73,1.656,90,1.789,92,1.33,93,1.938,96,3.187,99,2.309,100,1.585,101,1.585,103,1.749,104,2.231,105,1.955,106,1.749,112,3.251,113,2.231,114,2.231,115,2.231,125,2.548,130,3.006,170,3.131,171,1.955,198,2.231,199,2.231,200,2.231,201,3.321,202,3.321,203,2.65,204,3.861,205,2.65,206,2.548,207,3.835,208,2.65,209,1.955,210,2.65,211,2.65,212,2.65,213,2.231,214,2.65,215,2.65,216,2.65,217,2.65,218,2.65,219,1.955,220,1.448,221,2.65]],["title/injectables/AuthService.html",[0,0.493,170,1.666]],["body/injectables/AuthService.html",[0,0.42,2,0.606,3,0.138,4,0.12,5,0.12,8,0.417,9,0.028,10,0.336,13,0.138,14,0.044,17,0.012,18,0.012,21,0.239,22,0.971,23,3.055,25,1.543,26,1.3,27,2.417,28,0.984,30,1.974,31,1.478,32,0.947,33,1.974,34,2.084,37,1.3,38,1.706,39,1.543,40,1.054,41,1.163,42,1.054,43,0.564,49,2.298,50,1.054,51,1.163,52,0.963,56,1.689,62,2.34,63,2.49,64,2.588,65,2.084,66,1.163,67,1.418,68,1.483,70,1.706,78,1.294,133,1.483,135,1.308,136,2.209,137,1.543,138,1.543,139,2.378,140,2.084,146,2.378,147,3.332,151,2.378,154,2.378,157,2.378,158,2.58,170,1.418,172,0.963,173,1.483,174,1.3,175,1.3,209,1.3,222,1.483,223,2.824,224,3.534,225,4.042,226,1.762,227,1.762,228,3.403,229,2.824,230,1.762,231,1.762,232,1.762,233,1.307,234,1.762,235,1.762,236,2.824,237,2.668,238,1.762,239,1.762,240,1.762,241,1.762,242,1.483,243,1.762,244,1.762,245,1.762,246,1.762,247,1.762,248,2.333,249,2.824,250,1.762,251,2.824,252,1.762,253,1.762,254,1.762,255,1.3,256,2.378,257,1.762,258,1.762,259,1.762,260,1.762,261,1.762,262,1.762]],["title/classes/Category.html",[14,0.083,263,1.813]],["body/classes/Category.html",[3,0.234,4,0.203,5,0.203,8,0.234,9,0.028,13,0.382,14,0.075,17,0.017,18,0.017,21,0.662,28,1.064,32,1.177,43,0.957,62,1.282,76,1.917,78,1.348,117,4.004,168,1.788,220,2.3,233,2.138,263,2.662,264,1.105,265,1.973,266,1.95,267,4.102,268,2.446,269,3.216,270,3.216,271,2.778,272,4.611,273,2.989,274,2.989,275,4.209,276,2.989,277,2.989,278,2.989,279,2.989,280,2.206,281,2.517,282,2.517,283,2.517,284,2.517,285,2.517,286,2.517,287,2.206,288,2.206,289,2.517,290,2.517,291,2.517,292,2.989,293,1.973,294,2.517,295,2.206,296,2.206]],["title/controllers/CategoryController.html",[71,1.423,297,2.19]],["body/controllers/CategoryController.html",[1,1.267,3,0.182,4,0.158,5,0.158,6,1.531,8,0.414,9,0.028,10,0.443,13,0.182,14,0.058,17,0.014,18,0.014,21,0.315,22,1.203,28,1.01,30,2.002,31,1.5,32,0.961,33,2.002,38,1.819,70,1.819,71,0.995,73,0.995,76,1.819,79,1.387,87,1.387,88,0.995,132,1.711,135,1.62,136,2.561,137,1.911,138,1.911,164,2.58,165,2.58,166,1.711,167,1.711,168,1.387,172,1.267,177,2.58,178,1.267,181,1.711,187,1.711,191,3.107,233,2.243,263,1.267,268,2.655,269,2.308,297,2.308,298,1.952,299,3.497,300,2.779,301,1.952,302,2.889,303,2.319,304,2.319,305,2.319,306,1.531,307,2.944,308,2.319,309,2.319,310,3.497,311,2.319,312,1.531,313,2.319,314,2.319,315,1.531,316,3.379,317,2.319,318,2.319,319,1.531,320,2.3,321,1.952,322,2.58,323,1.531,324,2.319,325,2.319,326,2.319,327,1.952,328,2.319,329,2.319,330,2.319,331,1.952,332,1.952,333,2.319,334,1.952,335,1.952,336,2.319]],["title/modules/CategoryModule.html",[90,1.537,97,1.984]],["body/modules/CategoryModule.html",[3,0.269,4,0.233,5,0.233,8,0.483,9,0.028,10,0.655,12,1.364,13,0.269,14,0.086,17,0.019,18,0.019,31,1.022,43,1.098,73,1.984,90,2.144,92,1.721,93,2.323,96,3.028,97,3.749,99,2.767,100,2.05,101,2.05,103,3.054,106,2.263,125,3.054,207,2.887,219,2.53,220,1.873,263,1.873,293,3.054,297,3.456,320,3.295,321,2.887,337,2.887,338,2.887,339,3.429,340,3.429,341,3.429,342,2.887,343,2.887,344,3.429]],["title/injectables/CategoryService.html",[0,0.493,320,1.813]],["body/injectables/CategoryService.html",[0,0.492,2,0.741,3,0.169,4,0.147,5,0.147,8,0.403,9,0.028,10,0.411,13,0.169,14,0.054,17,0.014,18,0.014,21,0.293,22,1.137,23,3.165,25,1.806,27,2.699,28,1.022,30,2.045,31,1.532,32,0.981,33,2.045,38,1.768,39,1.806,40,1.288,42,1.288,43,0.69,52,1.177,56,1.288,62,1.418,64,2.266,67,1.081,70,1.768,79,1.288,135,1.532,136,2.466,137,1.806,138,1.806,172,1.177,228,3.645,233,2.206,263,1.806,268,2.843,269,2.183,295,1.589,300,2.183,301,2.784,302,2.808,306,2.183,312,2.183,315,2.183,316,3.302,320,1.806,322,2.44,323,1.422,342,1.814,345,1.814,346,3.306,347,2.154,348,2.154,349,3.306,350,2.154,351,2.154,352,3.306,353,2.154,354,2.154,355,2.154,356,2.154,357,2.154,358,1.814,359,2.154,360,2.154,361,2.154,362,2.154,363,3.306,364,2.154,365,2.154]],["title/classes/CreateCategoryDto.html",[14,0.083,302,1.813]],["body/classes/CreateCategoryDto.html",[3,0.263,4,0.228,5,0.228,8,0.357,9,0.027,13,0.263,14,0.13,17,0.019,18,0.019,21,0.455,28,1.061,32,1.17,76,1.911,78,1.459,88,2.789,233,2.054,264,1.24,266,2.111,267,4.359,269,3.417,270,3.417,271,3.008,287,2.474,302,2.49,366,4.891,367,2.474,368,3.73,369,3.353,370,3.353,371,2.213,372,3.353,373,3.353,374,2.823,375,2.823,376,2.823,377,2.725,378,1.832]],["title/classes/CreateQuestionDto.html",[14,0.083,379,1.813]],["body/classes/CreateQuestionDto.html",[3,0.252,4,0.218,5,0.218,8,0.347,9,0.027,13,0.252,14,0.111,17,0.018,18,0.018,21,0.436,28,1.129,32,1.129,76,2.034,78,1.417,233,2.283,264,1.187,266,2.05,268,2.541,270,3.341,368,3.829,377,3.027,378,1.754,379,2.417,380,5.102,381,2.369,382,3.341,383,4.262,384,3.341,385,2.541,386,3.211,387,3.211,388,3.211,389,3.211,390,3.735,391,3.211,392,3.211,393,2.369]],["title/classes/CreateUserDto.html",[14,0.083,147,1.984]],["body/classes/CreateUserDto.html",[3,0.196,4,0.17,5,0.17,8,0.196,9,0.027,13,0.196,14,0.093,17,0.015,18,0.015,21,0.339,28,1.126,31,1.312,32,1.126,63,2.209,76,2.029,78,1.741,88,2.854,147,2.21,233,2.01,248,2.905,255,3.247,264,0.923,266,1.712,271,2.44,368,3.786,371,1.648,375,3.112,376,2.102,377,2.909,378,1.364,382,2.905,384,2.905,394,5.053,395,2.102,396,3.705,397,3.705,398,3.705,399,2.497,400,4.095,401,2.497,402,2.497,403,2.497,404,2.497,405,2.497,406,2.497,407,2.497,408,2.102,409,3.112,410,3.112,411,2.497,412,2.497,413,2.497,414,2.497,415,2.102,416,2.497,417,2.497,418,2.497,419,2.497,420,2.102]],["title/injectables/JwtAuthGuard.html",[0,0.493,178,1.813]],["body/injectables/JwtAuthGuard.html",[0,0.834,2,1.594,3,0.363,4,0.315,5,0.315,7,3.059,8,0.44,9,0.027,10,0.885,11,3.059,12,1.844,13,0.363,14,0.116,15,1.988,17,0.023,18,0.023,178,3.065,319,3.059,421,4.634]],["title/injectables/JwtStrategy.html",[0,0.493,201,1.984]],["body/injectables/JwtStrategy.html",[0,0.641,2,1.063,3,0.242,4,0.21,5,0.21,8,0.458,9,0.028,10,0.59,12,1.23,13,0.242,14,0.077,15,1.326,17,0.018,18,0.018,21,0.42,22,1.482,23,2.49,24,3.179,25,1.689,26,2.281,27,3.209,28,0.823,30,1.715,31,1.284,32,0.59,33,1.715,34,3.179,35,3.628,37,3.179,38,1.063,39,1.689,40,1.848,41,2.844,42,1.848,43,0.99,44,2.281,45,2.602,46,2.281,47,2.04,48,3.179,49,2.614,50,1.848,51,2.04,52,1.689,53,2.281,55,2.602,56,1.848,57,2.281,58,3.628,59,2.281,60,2.602,61,2.602,62,1.848,63,2.163,64,1.552,65,2.281,66,2.04,67,1.552,70,1.063,201,2.577,422,2.602,423,3.091,424,3.091,425,3.091,426,3.091]],["title/injectables/LocalAuthGuard.html",[0,0.493,427,2.448]],["body/injectables/LocalAuthGuard.html",[0,0.834,2,1.594,3,0.363,4,0.315,5,0.315,7,3.059,8,0.44,9,0.027,10,0.885,11,3.059,12,1.844,13,0.363,14,0.116,15,1.988,17,0.023,18,0.023,427,4.14,428,3.901,429,4.634]],["title/injectables/LocalStrategy.html",[0,0.493,202,1.984]],["body/injectables/LocalStrategy.html",[0,0.674,2,1.145,3,0.261,4,0.226,5,0.226,8,0.454,9,0.028,10,0.636,12,1.324,13,0.261,14,0.083,15,1.428,17,0.019,18,0.019,21,0.452,22,1.56,23,2.589,24,3.346,25,1.818,28,0.866,30,1.804,31,1.352,32,0.866,33,1.804,38,1.145,41,2.993,44,2.456,46,2.456,47,2.197,49,2.389,53,2.456,57,2.456,62,1.428,64,1.671,66,2.197,67,1.671,70,1.145,87,1.99,88,1.428,158,3.165,170,3.001,171,2.456,174,2.456,175,2.456,185,2.802,202,2.712,228,2.993,430,2.802,431,3.328,432,3.328,433,4.534,434,3.328,435,2.802]],["title/classes/Question.html",[14,0.083,385,1.666]],["body/classes/Question.html",[3,0.239,4,0.207,5,0.207,8,0.239,9,0.028,13,0.418,14,0.076,17,0.017,18,0.017,21,0.414,28,1.111,32,1.164,43,0.976,62,1.308,76,2.002,78,1.708,117,2.818,220,2.332,233,2.254,264,1.128,266,1.978,268,2.472,270,3.251,272,4.722,280,2.25,296,2.25,382,3.251,383,4.146,384,3.251,385,2.921,390,3.634,436,2.013,437,3.049,438,3.049,439,3.049,440,2.567,441,3.049,442,3.049,443,3.049,444,2.567,445,3.049,446,3.049,447,2.013,448,2.567,449,2.25]],["title/controllers/QuestionController.html",[71,1.423,450,2.19]],["body/controllers/QuestionController.html",[1,1.357,3,0.195,4,0.169,5,0.169,6,1.639,8,0.425,9,0.028,10,0.474,13,0.195,14,0.062,17,0.015,18,0.015,21,0.337,22,1.266,28,0.989,30,1.93,31,1.446,32,0.926,33,1.93,38,1.782,70,1.782,71,1.065,73,1.065,76,1.782,79,1.485,87,1.485,88,1.065,132,1.832,135,1.706,136,2.65,137,2.011,138,2.011,164,2.716,165,2.716,166,1.832,167,1.832,168,1.485,172,1.357,177,2.716,178,1.357,181,1.832,187,1.832,191,3.236,233,2.178,268,2.724,300,2.895,306,1.639,307,3.099,312,1.639,315,1.639,319,1.639,323,1.639,327,2.091,331,2.091,332,2.091,334,2.091,335,2.091,379,2.964,385,1.247,450,2.43,451,2.091,452,2.091,453,2.483,454,2.483,455,2.483,456,2.483,457,2.483,458,2.483,459,3.449,460,2.483,461,2.483,462,2.396,463,2.091,464,2.716,465,2.483,466,2.483,467,2.483,468,2.483,469,2.483,470,2.483]],["title/modules/QuestionModule.html",[90,1.537,98,1.984]],["body/modules/QuestionModule.html",[3,0.274,4,0.238,5,0.238,8,0.475,9,0.028,10,0.667,13,0.274,14,0.088,17,0.019,18,0.019,31,1.042,43,1.119,73,2.01,90,2.171,92,1.754,93,2.353,96,3.045,98,3.765,99,2.802,100,2.09,101,2.09,103,3.093,106,2.307,125,3.093,219,2.578,220,1.909,343,2.942,385,1.754,393,2.578,447,3.093,450,3.49,462,3.313,463,2.942,471,2.942,472,2.942,473,3.495,474,3.495,475,3.495,476,3.495]],["title/injectables/QuestionService.html",[0,0.493,462,1.813]],["body/injectables/QuestionService.html",[0,0.525,2,0.808,3,0.184,4,0.16,5,0.16,8,0.416,9,0.028,10,0.448,13,0.184,14,0.059,17,0.014,18,0.014,21,0.319,22,1.215,23,3.145,25,1.929,27,2.822,28,1.015,30,2.013,31,1.508,32,0.966,33,2.013,38,1.74,39,1.929,42,1.405,43,0.752,52,1.283,56,1.405,62,1.514,64,2.369,67,1.179,70,1.74,135,1.636,136,2.578,137,1.929,138,1.929,172,1.283,228,3.508,233,2.146,268,2.848,300,2.331,306,2.331,312,2.331,315,2.331,323,1.55,358,1.977,379,2.904,385,1.773,393,1.733,449,1.733,452,2.973,459,3.392,462,1.929,464,2.605,477,1.977,478,2.349,479,2.349,480,3.531,481,2.349,482,2.349,483,2.349,484,2.349,485,2.349,486,2.349,487,2.349,488,2.349,489,2.349,490,2.349,491,2.349,492,2.349]],["title/classes/SigninAuthDto.html",[14,0.083,158,1.813]],["body/classes/SigninAuthDto.html",[3,0.302,4,0.262,5,0.262,8,0.302,9,0.027,13,0.302,14,0.125,17,0.02,18,0.02,21,0.523,28,0.954,32,0.954,63,2.784,76,1.718,78,1.879,88,2.672,158,2.729,248,3.66,264,1.424,266,2.314,368,3.316,371,2.541,377,3.316,378,2.103,408,3.241,409,4.205,410,4.205,415,3.241,420,3.241,493,4.668,494,3.241,495,3.849,496,3.849]],["title/injectables/ThrottlerBehindProxyGuard.html",[0,0.493,82,2.19]],["body/injectables/ThrottlerBehindProxyGuard.html",[0,0.733,2,1.297,3,0.295,4,0.256,5,0.256,8,0.386,9,0.028,10,0.72,13,0.295,14,0.094,15,2.113,17,0.02,18,0.02,21,0.512,22,1.695,28,0.72,30,1.5,31,1.124,32,0.72,33,1.5,38,1.297,70,1.297,78,1.578,82,3.252,84,3.636,108,2.781,144,3.174,497,4.149,498,3.174,499,5.489,500,5.489,501,4.927,502,4.927,503,5.489,504,3.77,505,3.77,506,3.77,507,3.77,508,3.77,509,3.77,510,3.77,511,3.77,512,3.77]],["title/classes/TokenDto.html",[14,0.083,237,2.19]],["body/classes/TokenDto.html",[3,0.339,4,0.294,5,0.294,8,0.339,9,0.027,13,0.339,14,0.135,17,0.022,18,0.022,21,0.587,28,0.826,32,0.826,76,1.488,78,1.722,88,2.511,237,3.551,256,4.929,264,1.6,266,2.492,368,3.217,371,2.855,377,3.217,378,2.363,513,3.642,514,4.325]],["title/classes/UpdateCategoryDto.html",[14,0.083,316,1.984]],["body/classes/UpdateCategoryDto.html",[3,0.361,4,0.314,5,0.314,8,0.438,9,0.027,13,0.361,14,0.115,15,1.977,17,0.023,18,0.023,135,2.136,264,1.705,302,2.519,316,3.345,322,3.402,367,3.402,515,3.882,516,3.882,517,3.402,518,3.402,519,4.61]],["title/classes/UpdateQuestionDto.html",[14,0.083,459,1.984]],["body/classes/UpdateQuestionDto.html",[3,0.361,4,0.314,5,0.314,8,0.438,9,0.027,13,0.361,14,0.115,15,1.977,17,0.023,18,0.023,135,2.136,264,1.705,379,2.519,381,3.402,459,3.345,464,3.402,516,3.882,517,3.402,518,3.402,520,3.882,521,4.61]],["title/classes/User.html",[14,0.083,49,1.537]],["body/classes/User.html",[3,0.205,4,0.178,5,0.178,8,0.205,9,0.028,13,0.354,14,0.065,17,0.016,18,0.016,21,0.355,28,1.14,32,1.158,43,0.836,49,2.093,50,1.562,62,1.12,63,2.268,76,2.053,78,1.769,117,3.281,168,1.562,206,1.724,220,2.087,233,2.043,248,2.982,255,3.333,264,0.966,266,1.77,271,2.522,272,4.788,280,1.927,281,2.199,282,2.199,283,2.199,284,2.199,285,2.199,286,2.199,287,1.927,288,1.927,289,2.199,290,2.199,291,2.199,296,1.927,382,2.982,384,2.982,396,3.803,397,3.803,398,3.803,400,4.185,440,2.199,444,2.199,522,1.724,523,4.517,524,2.612,525,2.612,526,2.612,527,2.612,528,2.612,529,2.612,530,2.612,531,2.612,532,2.612,533,2.199]],["title/coverage.html",[534,3.339]],["body/coverage.html",[0,0.904,1,1.357,5,0.169,6,1.639,7,2.895,9,0.027,14,0.15,17,0.015,18,0.015,19,1.485,20,2.091,32,0.474,49,1.151,67,1.247,71,2.081,72,1.832,74,2.091,80,1.639,82,1.639,84,1.832,126,2.091,130,1.639,131,2.091,147,1.485,158,1.357,170,1.247,178,1.357,201,1.485,202,1.485,206,1.639,222,2.091,237,1.639,263,1.357,265,2.43,288,1.832,293,1.639,297,1.639,298,2.091,302,1.357,316,1.485,319,1.639,320,1.357,345,2.091,366,2.091,367,2.716,379,1.357,380,2.091,381,2.716,385,1.247,394,2.091,395,2.091,422,2.091,427,1.832,428,2.091,430,2.091,436,2.43,447,1.639,450,1.639,451,2.091,459,1.485,462,1.357,477,2.091,493,2.091,494,2.091,497,2.091,498,2.091,513,2.091,515,2.091,520,2.091,522,2.43,534,1.832,535,2.483,536,2.483,537,2.483,538,6.681,539,4.851,540,3.681,541,2.483,542,3.681,543,4.851,544,5.891,545,4.386,546,4.851,547,2.483,548,3.681,549,2.091,550,2.091,551,2.483,552,2.483]],["title/dependencies.html",[93,2.003,553,2.773]],["body/dependencies.html",[9,0.028,10,0.683,12,1.423,14,0.119,17,0.02,18,0.02,43,1.145,47,3.531,48,2.639,52,1.954,93,1.796,105,2.639,108,2.639,209,2.639,213,3.012,242,3.012,374,3.012,378,1.954,435,4.007,517,2.639,518,2.639,554,5.702,555,3.577,556,3.577,557,3.577,558,3.577,559,3.577,560,3.577,561,3.577,562,3.577,563,3.577,564,3.577,565,3.577,566,3.577,567,3.577,568,3.577,569,3.577,570,3.577,571,3.577,572,3.577,573,3.577,574,3.577,575,3.577,576,3.577,577,3.577,578,3.577,579,3.577,580,3.577,581,3.577,582,3.577,583,3.577,584,3.577,585,3.577]],["title/miscellaneous/functions.html",[586,1.515,587,3.359]],["body/miscellaneous/functions.html",[9,0.024,17,0.024,18,0.024,21,0.685,549,4.248,550,5.268,586,2.756,587,4.248,588,5.045]],["title/index.html",[21,0.377,589,2.773,590,2.773]],["body/index.html",[4,0.234,9,0.027,17,0.019,18,0.019,140,3.422,534,2.539,591,3.442,592,3.442,593,4.638,594,3.442,595,3.442,596,3.442,597,3.442,598,3.442,599,3.442,600,3.442,601,5.246,602,3.442,603,3.442,604,3.442,605,3.442,606,6.171,607,3.442,608,3.442,609,3.442,610,6.038,611,3.442,612,3.442,613,4.638,614,3.442,615,3.442,616,3.442,617,3.442,618,4.638,619,3.442,620,3.442,621,3.442,622,4.638,623,4.638,624,3.442,625,3.442,626,3.442,627,3.442,628,3.442,629,2.898,630,3.442,631,3.442,632,3.442,633,3.442,634,3.442,635,3.442,636,3.442,637,3.442,638,3.442,639,3.442,640,3.442,641,3.442,642,3.442,643,3.442,644,3.442,645,3.442,646,3.442,647,3.442]],["title/modules.html",[92,2.272]],["body/modules.html",[9,0.023,17,0.023,18,0.023,91,3.106,92,2.363,96,2.363,97,2.814,98,2.814,629,5.309,648,6.305,649,6.305,650,6.305]],["title/overview.html",[651,3.81]],["body/overview.html",[2,1.149,9,0.027,17,0.019,18,0.019,19,3.662,73,1.433,91,4.113,92,1.677,93,2.282,94,2.813,95,2.813,96,3.32,97,3.662,98,3.662,99,2.718,100,1.998,101,1.998,124,2.813,170,3.074,198,2.813,199,2.813,200,2.813,201,3.09,202,3.09,264,1.235,320,2.823,337,2.813,338,2.813,462,2.823,471,2.813,472,2.813,651,2.813,652,4.546,653,3.341]],["title/miscellaneous/typealiases.html",[586,1.515,654,3.99]],["body/miscellaneous/typealiases.html",[9,0.023,17,0.023,18,0.023,21,0.639,32,1.081,50,3.387,265,3.106,295,4.179,390,4.179,436,3.106,449,4.179,522,3.106,586,2.571,655,4.706,656,3.962,657,4.768,658,3.962,659,4.706]],["title/miscellaneous/variables.html",[586,1.515,660,3.359]],["body/miscellaneous/variables.html",[9,0.026,17,0.023,18,0.023,21,0.62,206,3.67,265,3.013,293,3.67,294,3.843,436,3.013,447,3.67,448,3.843,522,3.013,533,3.843,586,2.493,656,3.843,657,3.843,658,3.843,660,3.843,661,5.996,662,5.996]]],"invertedIndex":[["",{"_index":9,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/AdminStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"classes/SigninAuthDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"classes/TokenDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/User.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":538,"title":{},"body":{"coverage.html":{}}}],["0.1.13",{"_index":581,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":568,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":567,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":576,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":544,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":542,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":539,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":543,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":547,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":548,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":546,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":540,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":541,"title":{},"body":{"coverage.html":{}}}],["1.0.0",{"_index":578,"title":{},"body":{"dependencies.html":{}}}],["1.0.34",{"_index":565,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":555,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["10h",{"_index":218,"title":{},"body":{"modules/AuthModule.html":{}}}],["11",{"_index":653,"title":{},"body":{"overview.html":{}}}],["16.0.0",{"_index":572,"title":{},"body":{"dependencies.html":{}}}],["2.0.0",{"_index":561,"title":{},"body":{"dependencies.html":{}}}],["2.4.2",{"_index":563,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":566,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":583,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":652,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":577,"title":{},"body":{"dependencies.html":{}}}],["5.0.2",{"_index":574,"title":{},"body":{"dependencies.html":{}}}],["6.2.2",{"_index":575,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["7.0.3",{"_index":570,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":554,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":558,"title":{},"body":{"dependencies.html":{}}}],["9.0.2",{"_index":557,"title":{},"body":{"dependencies.html":{}}}],["_id",{"_index":275,"title":{},"body":{"classes/Category.html":{}}}],["accesstoken",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"classes/TokenDto.html":{}}}],["action",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["admin",{"_index":54,"title":{},"body":{"injectables/AdminStrategy.html":{}}}],["adminauthguard",{"_index":1,"title":{"injectables/AdminAuthGuard.html":{}},"body":{"injectables/AdminAuthGuard.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/QuestionController.html":{},"coverage.html":{}}}],["adminstrategy",{"_index":19,"title":{"injectables/AdminStrategy.html":{}},"body":{"injectables/AdminStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["admintest",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["admintest(@req",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["admintest(req",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["aliases",{"_index":655,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["amazing",{"_index":630,"title":{},"body":{"index.html":{}}}],["app",{"_index":608,"title":{},"body":{"index.html":{}}}],["app.service",{"_index":81,"title":{},"body":{"controllers/AppController.html":{}}}],["appcontroller",{"_index":72,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["applications",{"_index":599,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":91,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":80,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"coverage.html":{}}}],["async",{"_index":23,"title":{},"body":{"injectables/AdminStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/QuestionService.html":{}}}],["auth",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["auth.controller",{"_index":205,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.dto",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["auth.dto.ts",{"_index":494,"title":{},"body":{"classes/SigninAuthDto.html":{},"coverage.html":{}}}],["auth.dto.ts:11",{"_index":496,"title":{},"body":{"classes/SigninAuthDto.html":{}}}],["auth.dto.ts:6",{"_index":495,"title":{},"body":{"classes/SigninAuthDto.html":{}}}],["auth.gaurd",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/QuestionController.html":{}}}],["auth.gaurd.ts",{"_index":7,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":130,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":11,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('admin",{"_index":16,"title":{},"body":{"injectables/AdminAuthGuard.html":{}}}],["authguard('jwt",{"_index":421,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":429,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":96,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/QuestionModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":640,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":170,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":292,"title":{},"body":{"classes/Category.html":{}}}],["await",{"_index":64,"title":{},"body":{"injectables/AdminStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/QuestionService.html":{}}}],["backers",{"_index":631,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.compare(password",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(password",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcryptjs",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["behind",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"coverage.html":{}}}],["bigcategory",{"_index":382,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/Question.html":{},"classes/User.html":{}}}],["body",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/QuestionController.html":{}}}],["boolean",{"_index":271,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["bootstrap",{"_index":550,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":650,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":648,"title":{},"body":{"modules.html":{}}}],["building",{"_index":594,"title":{},"body":{"index.html":{}}}],["cache",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["category",{"_index":263,"title":{"classes/Category.html":{}},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"coverage.html":{}}}],["category.controller",{"_index":341,"title":{},"body":{"modules/CategoryModule.html":{}}}],["category.dto",{"_index":322,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts",{"_index":367,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:12",{"_index":372,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:15",{"_index":373,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:18",{"_index":370,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:21",{"_index":369,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.name",{"_index":344,"title":{},"body":{"modules/CategoryModule.html":{}}}],["category.save",{"_index":360,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category.service",{"_index":321,"title":{},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{}}}],["category/category.module",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["categorycontroller",{"_index":297,"title":{"controllers/CategoryController.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"coverage.html":{}}}],["categorydocument",{"_index":295,"title":{},"body":{"classes/Category.html":{},"injectables/CategoryService.html":{},"miscellaneous/typealiases.html":{}}}],["categorymodel",{"_index":349,"title":{},"body":{"injectables/CategoryService.html":{}}}],["categorymodule",{"_index":97,"title":{"modules/CategoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{},"modules.html":{},"overview.html":{}}}],["categoryschema",{"_index":293,"title":{},"body":{"classes/Category.html":{},"modules/CategoryModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["categoryservice",{"_index":320,"title":{"injectables/CategoryService.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"coverage.html":{},"overview.html":{}}}],["class",{"_index":14,"title":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/Question.html":{},"classes/SigninAuthDto.html":{},"classes/TokenDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/User.html":{}},"body":{"injectables/AdminAuthGuard.html":{},"injectables/AdminStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"classes/SigninAuthDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"classes/TokenDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/User.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":264,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/Question.html":{},"classes/SigninAuthDto.html":{},"classes/TokenDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_categorymodule",{"_index":337,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_categorymodule_imports",{"_index":339,"title":{},"body":{"modules/CategoryModule.html":{}}}],["cluster_categorymodule_providers",{"_index":338,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_questionmodule",{"_index":471,"title":{},"body":{"modules/QuestionModule.html":{},"overview.html":{}}}],["cluster_questionmodule_imports",{"_index":473,"title":{},"body":{"modules/QuestionModule.html":{}}}],["cluster_questionmodule_providers",{"_index":472,"title":{},"body":{"modules/QuestionModule.html":{},"overview.html":{}}}],["configmodule",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["console.log",{"_index":425,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["console.log(req",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["const",{"_index":62,"title":{},"body":{"injectables/AdminStrategy.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"injectables/CategoryService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"classes/User.html":{}}}],["constructor",{"_index":25,"title":{},"body":{"injectables/AdminStrategy.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/QuestionService.html":{}}}],["constructor(@injectmodel(user.name",{"_index":55,"title":{},"body":{"injectables/AdminStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["constructor(authservice",{"_index":431,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(categorymodel",{"_index":347,"title":{},"body":{"injectables/CategoryService.html":{}}}],["constructor(private",{"_index":87,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"injectables/LocalStrategy.html":{},"controllers/QuestionController.html":{}}}],["constructor(questionmodel",{"_index":478,"title":{},"body":{"injectables/QuestionService.html":{}}}],["constructor(usermodel",{"_index":26,"title":{},"body":{"injectables/AdminStrategy.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["controller",{"_index":71,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/QuestionController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/QuestionController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('category",{"_index":324,"title":{},"body":{"controllers/CategoryController.html":{}}}],["controller('question",{"_index":465,"title":{},"body":{"controllers/QuestionController.html":{}}}],["controllers",{"_index":73,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"overview.html":{}}}],["coverage",{"_index":534,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateQuestionDto.html":{}}}],["create(@body",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/QuestionController.html":{}}}],["create(createcategorydto",{"_index":301,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["create(createquestiondto",{"_index":452,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["create(createuserdto",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["createcategorydto",{"_index":302,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["createdat",{"_index":282,"title":{},"body":{"classes/Category.html":{},"classes/User.html":{}}}],["createquestiondto",{"_index":379,"title":{"classes/CreateQuestionDto.html":{}},"body":{"classes/CreateQuestionDto.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["createuser",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["createuser.save",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["createuserdto",{"_index":147,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["cross",{"_index":569,"title":{},"body":{"dependencies.html":{}}}],["date",{"_index":400,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["decorators",{"_index":76,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/SigninAuthDto.html":{},"classes/TokenDto.html":{},"classes/User.html":{}}}],["default",{"_index":661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":28,"title":{},"body":{"injectables/AdminStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/SigninAuthDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"classes/TokenDto.html":{},"classes/User.html":{}}}],["delete",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"controllers/QuestionController.html":{},"classes/User.html":{}}}],["delete(':id",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["delete(':num",{"_index":334,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/QuestionController.html":{}}}],["delete(':num')@useguards(adminauthguard",{"_index":313,"title":{},"body":{"controllers/CategoryController.html":{}}}],["dependencies",{"_index":93,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/QuestionModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":600,"title":{},"body":{"index.html":{}}}],["development",{"_index":609,"title":{},"body":{"index.html":{}}}],["doc",{"_index":289,"title":{},"body":{"classes/Category.html":{},"classes/User.html":{}}}],["document",{"_index":296,"title":{},"body":{"classes/Category.html":{},"classes/Question.html":{},"classes/User.html":{}}}],["documentation",{"_index":535,"title":{},"body":{"coverage.html":{}}}],["dotenv",{"_index":571,"title":{},"body":{"dependencies.html":{}}}],["dto/create",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["dto/signin",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["dto/token.dto",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto/update",{"_index":323,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["e2e",{"_index":619,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":595,"title":{},"body":{"index.html":{}}}],["encryptionpassword",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["encryptionpassword(createuserdto",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["endcategory",{"_index":383,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/Question.html":{}}}],["endtime",{"_index":396,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["env",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{},"dependencies.html":{}}}],["envfilepath",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["expiresin",{"_index":217,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":13,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/AdminStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"classes/SigninAuthDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"classes/TokenDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/User.html":{}}}],["exports",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{}}}],["express",{"_index":560,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":15,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/AdminStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateQuestionDto.html":{}}}],["extraction",{"_index":510,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["extractjwt",{"_index":45,"title":{},"body":{"injectables/AdminStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":61,"title":{},"body":{"injectables/AdminStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["fail",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["false",{"_index":285,"title":{},"body":{"classes/Category.html":{},"classes/User.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/AdminStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"classes/SigninAuthDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"classes/TokenDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/User.html":{},"coverage.html":{}}}],["findall",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["findlowrank",{"_index":346,"title":{},"body":{"injectables/CategoryService.html":{}}}],["findlowrank(precedence",{"_index":352,"title":{},"body":{"injectables/CategoryService.html":{}}}],["findone",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["findone(@param('id",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["findone(@param('num",{"_index":327,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/QuestionController.html":{}}}],["findone(id",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["findone(num",{"_index":306,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["findrowrank",{"_index":299,"title":{},"body":{"controllers/CategoryController.html":{}}}],["findrowrank(@param('precedence",{"_index":329,"title":{},"body":{"controllers/CategoryController.html":{}}}],["findrowrank(precedence",{"_index":309,"title":{},"body":{"controllers/CategoryController.html":{}}}],["framework",{"_index":593,"title":{},"body":{"index.html":{}}}],["function",{"_index":288,"title":{},"body":{"classes/Category.html":{},"classes/User.html":{},"coverage.html":{}}}],["functions",{"_index":587,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gaurds/admin",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["gaurds/jwt",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/low/:precedence",{"_index":310,"title":{},"body":{"controllers/CategoryController.html":{}}}],["get(':id",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(':num",{"_index":307,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/QuestionController.html":{}}}],["gethello",{"_index":75,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":589,"title":{"index.html":{}},"body":{}}],["gettracker",{"_index":501,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["gettracker(req",{"_index":502,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["grow",{"_index":626,"title":{},"body":{"index.html":{}}}],["hashedpassword",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["hello",{"_index":128,"title":{},"body":{"injectables/AppService.html":{}}}],["helmet",{"_index":573,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":637,"title":{},"body":{"index.html":{}}}],["https://nestjs.com",{"_index":644,"title":{},"body":{"index.html":{}}}],["id",{"_index":63,"title":{},"body":{"injectables/AdminStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/SigninAuthDto.html":{},"classes/User.html":{}}}],["identifier",{"_index":536,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":8,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/AdminStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"classes/SigninAuthDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"classes/TokenDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/User.html":{}}}],["imports",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/QuestionModule.html":{}}}],["index",{"_index":21,"title":{"index.html":{}},"body":{"injectables/AdminStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/SigninAuthDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"classes/TokenDto.html":{},"classes/User.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["individualize",{"_index":508,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/AdminStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"classes/SigninAuthDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"classes/TokenDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/User.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AdminAuthGuard.html":{},"injectables/AdminStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/QuestionService.html":{},"injectables/ThrottlerBehindProxyGuard.html":{}},"body":{"injectables/AdminAuthGuard.html":{},"injectables/AdminStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/QuestionService.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/AdminStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/QuestionService.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"overview.html":{}}}],["injectmodel",{"_index":42,"title":{},"body":{"injectables/AdminStrategy.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/JwtStrategy.html":{},"injectables/QuestionService.html":{}}}],["injectmodel(category.name",{"_index":357,"title":{},"body":{"injectables/CategoryService.html":{}}}],["injectmodel(question.name",{"_index":486,"title":{},"body":{"injectables/QuestionService.html":{}}}],["injectmodel(user.name",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["installation",{"_index":605,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":607,"title":{},"body":{"index.html":{}}}],["ip",{"_index":509,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["isadmin",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["isbooleanstring",{"_index":375,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{}}}],["isdate",{"_index":414,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isend",{"_index":267,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{}}}],["isglobal",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":368,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/SigninAuthDto.html":{},"classes/TokenDto.html":{}}}],["isnotempty()@isbooleanstring",{"_index":404,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnumber",{"_index":376,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring",{"_index":377,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/SigninAuthDto.html":{},"classes/TokenDto.html":{}}}],["isstring()@isnotempty",{"_index":371,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/SigninAuthDto.html":{},"classes/TokenDto.html":{}}}],["isstring()@isnotempty()@matches(/^[a",{"_index":408,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SigninAuthDto.html":{}}}],["isstring()@isnotempty()@minlength(2)@maxlength(20",{"_index":402,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["join",{"_index":633,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":48,"title":{},"body":{"injectables/AdminStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":178,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/QuestionController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":60,"title":{},"body":{"injectables/AdminStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":214,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtservise",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":201,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":641,"title":{},"body":{"index.html":{}}}],["license",{"_index":647,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":623,"title":{},"body":{"index.html":{}}}],["limit",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["literal",{"_index":659,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["local",{"_index":435,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":427,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":202,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["logger",{"_index":40,"title":{},"body":{"injectables/AdminStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/JwtStrategy.html":{}}}],["logger.log('start",{"_index":426,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["matches",{"_index":415,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SigninAuthDto.html":{}}}],["matches(/^[a",{"_index":420,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SigninAuthDto.html":{}}}],["matching",{"_index":18,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/AdminStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"classes/SigninAuthDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"classes/TokenDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/User.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":416,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(20",{"_index":419,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["meet",{"_index":511,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["metadata",{"_index":580,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":22,"title":{},"body":{"injectables/AdminStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"injectables/ThrottlerBehindProxyGuard.html":{}}}],["middlecategory",{"_index":384,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/Question.html":{},"classes/User.html":{}}}],["minlength",{"_index":417,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(2",{"_index":418,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":586,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":622,"title":{},"body":{"index.html":{}}}],["mode",{"_index":613,"title":{},"body":{"index.html":{}}}],["model",{"_index":27,"title":{},"body":{"injectables/AdminStrategy.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/JwtStrategy.html":{},"injectables/QuestionService.html":{}}}],["module",{"_index":90,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/QuestionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/QuestionModule.html":{}}}],["modules",{"_index":92,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/QuestionModule.html":{},"modules.html":{},"overview.html":{}}}],["mongoose",{"_index":52,"title":{},"body":{"injectables/AdminStrategy.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/JwtStrategy.html":{},"injectables/QuestionService.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/QuestionModule.html":{}}}],["mongoosemodule.forfeature",{"_index":219,"title":{},"body":{"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/QuestionModule.html":{}}}],["mongoosemodule.forroot(process.env.database_url",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":636,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":642,"title":{},"body":{"index.html":{}}}],["name",{"_index":31,"title":{},"body":{"injectables/AdminStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"injectables/ThrottlerBehindProxyGuard.html":{}}}],["needs",{"_index":512,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["nest",{"_index":601,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":646,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":10,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/AdminStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":556,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":209,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":517,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateQuestionDto.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":43,"title":{},"body":{"injectables/AdminStrategy.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"injectables/JwtStrategy.html":{},"classes/Question.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"classes/User.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":12,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/AdminStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":559,"title":{},"body":{"dependencies.html":{}}}],["nestjs/throttler",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"dependencies.html":{}}}],["new",{"_index":67,"title":{},"body":{"injectables/AdminStrategy.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["node.js",{"_index":592,"title":{},"body":{"index.html":{}}}],["npm",{"_index":606,"title":{},"body":{"index.html":{}}}],["num",{"_index":268,"title":{},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateQuestionDto.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["number",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/User.html":{}}}],["open",{"_index":624,"title":{},"body":{"index.html":{}}}],["optional",{"_index":33,"title":{},"body":{"injectables/AdminStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"injectables/ThrottlerBehindProxyGuard.html":{}}}],["out",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/QuestionModule.html":{},"overview.html":{}}}],["overview",{"_index":651,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":553,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/QuestionController.html":{}}}],["param('num",{"_index":332,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/QuestionController.html":{}}}],["parameters",{"_index":30,"title":{},"body":{"injectables/AdminStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"injectables/ThrottlerBehindProxyGuard.html":{}}}],["partialtype",{"_index":516,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateQuestionDto.html":{}}}],["partialtype(createcategorydto",{"_index":519,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["partialtype(createquestiondto",{"_index":521,"title":{},"body":{"classes/UpdateQuestionDto.html":{}}}],["passport",{"_index":47,"title":{},"body":{"injectables/AdminStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{},"modules/CategoryModule.html":{}}}],["passportstrategy",{"_index":44,"title":{},"body":{"injectables/AdminStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":53,"title":{},"body":{"injectables/AdminStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/SigninAuthDto.html":{},"classes/User.html":{}}}],["patch",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/QuestionController.html":{}}}],["patch(':num",{"_index":331,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/QuestionController.html":{}}}],["patch(':num')@useguards(adminauthguard",{"_index":317,"title":{},"body":{"controllers/CategoryController.html":{}}}],["path",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["path.resolve()}/env/.${process.env.node_env}.env",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["payload",{"_index":37,"title":{},"body":{"injectables/AdminStrategy.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["phonenum",{"_index":397,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["please",{"_index":634,"title":{},"body":{"index.html":{}}}],["post",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/QuestionController.html":{}}}],["post('/admintests",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/admintests')@useguards(adminauthguard",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signin",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/tests",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/tests')@useguards(jwtauthguard",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@useguards(adminauthguard",{"_index":303,"title":{},"body":{"controllers/CategoryController.html":{}}}],["precedence",{"_index":269,"title":{},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{}}}],["prefix",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/QuestionController.html":{}}}],["private",{"_index":56,"title":{},"body":{"injectables/AdminStrategy.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/JwtStrategy.html":{},"injectables/QuestionService.html":{}}}],["problem",{"_index":390,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/Question.html":{},"miscellaneous/typealiases.html":{}}}],["process.env.jwt_secret",{"_index":59,"title":{},"body":{"injectables/AdminStrategy.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["production",{"_index":615,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":591,"title":{},"body":{"index.html":{}}}],["project",{"_index":625,"title":{},"body":{"index.html":{}}}],["promise",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/LocalStrategy.html":{},"injectables/QuestionService.html":{}}}],["prop",{"_index":272,"title":{},"body":{"classes/Category.html":{},"classes/Question.html":{},"classes/User.html":{}}}],["prop({auto",{"_index":274,"title":{},"body":{"classes/Category.html":{}}}],["prop({unique",{"_index":440,"title":{},"body":{"classes/Question.html":{},"classes/User.html":{}}}],["properties",{"_index":266,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/Question.html":{},"classes/SigninAuthDto.html":{},"classes/TokenDto.html":{},"classes/User.html":{}}}],["protected",{"_index":500,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["providers",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/QuestionModule.html":{}}}],["proxy.guard",{"_index":85,"title":{},"body":{"controllers/AppController.html":{}}}],["proxy.guard.ts",{"_index":498,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{},"coverage.html":{}}}],["proxy.guard.ts:6",{"_index":504,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["question",{"_index":385,"title":{"classes/Question.html":{}},"body":{"classes/CreateQuestionDto.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["question.controller",{"_index":475,"title":{},"body":{"modules/QuestionModule.html":{}}}],["question.dto",{"_index":464,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{}}}],["question.dto.ts",{"_index":381,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["question.dto.ts:10",{"_index":391,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:12",{"_index":386,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:14",{"_index":388,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:16",{"_index":387,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:6",{"_index":389,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:8",{"_index":392,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.name",{"_index":476,"title":{},"body":{"modules/QuestionModule.html":{}}}],["question.save",{"_index":488,"title":{},"body":{"injectables/QuestionService.html":{}}}],["question.service",{"_index":463,"title":{},"body":{"controllers/QuestionController.html":{},"modules/QuestionModule.html":{}}}],["question/question.module",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["questioncontroller",{"_index":450,"title":{"controllers/QuestionController.html":{}},"body":{"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"coverage.html":{}}}],["questiondocument",{"_index":449,"title":{},"body":{"classes/Question.html":{},"injectables/QuestionService.html":{},"miscellaneous/typealiases.html":{}}}],["questionmodel",{"_index":480,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionmodule",{"_index":98,"title":{"modules/QuestionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/QuestionModule.html":{},"modules.html":{},"overview.html":{}}}],["questionschema",{"_index":447,"title":{},"body":{"classes/Question.html":{},"modules/QuestionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questionservice",{"_index":462,"title":{"injectables/QuestionService.html":{}},"body":{"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"coverage.html":{},"overview.html":{}}}],["read",{"_index":635,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":88,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"controllers/QuestionController.html":{},"classes/SigninAuthDto.html":{},"classes/TokenDto.html":{}}}],["record",{"_index":503,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["reflect",{"_index":579,"title":{},"body":{"dependencies.html":{}}}],["remove",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["remove(@param('id",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["remove(@param('num",{"_index":335,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/QuestionController.html":{}}}],["remove(id",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["remove(num",{"_index":312,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["removes",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["repository",{"_index":604,"title":{},"body":{"index.html":{}}}],["req",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ThrottlerBehindProxyGuard.html":{}}}],["req.ip",{"_index":507,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["req.ips.length",{"_index":505,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["req.ips[0",{"_index":506,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["request",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/QuestionModule.html":{},"overview.html":{}}}],["results",{"_index":17,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/AdminStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"classes/SigninAuthDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"classes/TokenDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/User.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["ret",{"_index":290,"title":{},"body":{"classes/Category.html":{},"classes/User.html":{}}}],["ret._id",{"_index":291,"title":{},"body":{"classes/Category.html":{},"classes/User.html":{}}}],["return",{"_index":70,"title":{},"body":{"injectables/AdminStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"injectables/ThrottlerBehindProxyGuard.html":{}}}],["returns",{"_index":38,"title":{},"body":{"injectables/AdminStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"injectables/ThrottlerBehindProxyGuard.html":{}}}],["rimraf",{"_index":582,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":610,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":584,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":596,"title":{},"body":{"index.html":{}}}],["schema",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{},"classes/Category.html":{},"modules/CategoryModule.html":{},"classes/Question.html":{},"modules/QuestionModule.html":{},"classes/User.html":{}}}],["schemafactory",{"_index":280,"title":{},"body":{"classes/Category.html":{},"classes/Question.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(category",{"_index":294,"title":{},"body":{"classes/Category.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(question",{"_index":448,"title":{},"body":{"classes/Question.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":533,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schemas/category.schema",{"_index":342,"title":{},"body":{"modules/CategoryModule.html":{},"injectables/CategoryService.html":{}}}],["schemas/question.schema",{"_index":393,"title":{},"body":{"classes/CreateQuestionDto.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{}}}],["schemas/user.schema",{"_index":51,"title":{},"body":{"injectables/AdminStrategy.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["secret",{"_index":215,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":58,"title":{},"body":{"injectables/AdminStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["server",{"_index":597,"title":{},"body":{"index.html":{}}}],["side",{"_index":598,"title":{},"body":{"index.html":{}}}],["signin",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@body",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signinauthdto",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signinauthdto",{"_index":158,"title":{"classes/SigninAuthDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/SigninAuthDto.html":{},"coverage.html":{}}}],["signoptions",{"_index":216,"title":{},"body":{"modules/AuthModule.html":{}}}],["sort",{"_index":362,"title":{},"body":{"injectables/CategoryService.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/AdminStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"classes/SigninAuthDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"classes/TokenDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/User.html":{},"index.html":{}}}],["sponsors",{"_index":628,"title":{},"body":{"index.html":{}}}],["src/.../category.schema.ts",{"_index":656,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":588,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../question.schema.ts",{"_index":657,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":658,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":74,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:11",{"_index":77,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":126,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":127,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:26",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:32",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:38",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:44",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:49",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:54",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:59",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":343,"title":{},"body":{"modules/CategoryModule.html":{},"modules/QuestionModule.html":{}}}],["src/auth/auth.module.ts",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:12",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:18",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:24",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:31",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:46",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:50",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:54",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:59",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/create",{"_index":394,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/auth/dto/signin",{"_index":493,"title":{},"body":{"classes/SigninAuthDto.html":{},"coverage.html":{}}}],["src/auth/dto/token.dto.ts",{"_index":513,"title":{},"body":{"classes/TokenDto.html":{},"coverage.html":{}}}],["src/auth/dto/token.dto.ts:6",{"_index":514,"title":{},"body":{"classes/TokenDto.html":{}}}],["src/auth/gaurds/admin",{"_index":6,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"controllers/CategoryController.html":{},"controllers/QuestionController.html":{},"coverage.html":{}}}],["src/auth/gaurds/jwt",{"_index":319,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/QuestionController.html":{},"coverage.html":{}}}],["src/auth/gaurds/local",{"_index":428,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/schemas/user.schema.ts",{"_index":522,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/auth/schemas/user.schema.ts:14",{"_index":526,"title":{},"body":{"classes/User.html":{}}}],["src/auth/schemas/user.schema.ts:17",{"_index":529,"title":{},"body":{"classes/User.html":{}}}],["src/auth/schemas/user.schema.ts:20",{"_index":532,"title":{},"body":{"classes/User.html":{}}}],["src/auth/schemas/user.schema.ts:23",{"_index":530,"title":{},"body":{"classes/User.html":{}}}],["src/auth/schemas/user.schema.ts:26",{"_index":524,"title":{},"body":{"classes/User.html":{}}}],["src/auth/schemas/user.schema.ts:29",{"_index":528,"title":{},"body":{"classes/User.html":{}}}],["src/auth/schemas/user.schema.ts:32",{"_index":531,"title":{},"body":{"classes/User.html":{}}}],["src/auth/schemas/user.schema.ts:35",{"_index":525,"title":{},"body":{"classes/User.html":{}}}],["src/auth/schemas/user.schema.ts:38",{"_index":527,"title":{},"body":{"classes/User.html":{}}}],["src/auth/strategy/admin.strategy.ts",{"_index":20,"title":{},"body":{"injectables/AdminStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/admin.strategy.ts:18",{"_index":36,"title":{},"body":{"injectables/AdminStrategy.html":{}}}],["src/auth/strategy/admin.strategy.ts:9",{"_index":29,"title":{},"body":{"injectables/AdminStrategy.html":{}}}],["src/auth/strategy/jwt.strategy.ts",{"_index":422,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/jwt.strategy.ts:19",{"_index":424,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategy/jwt.strategy.ts:9",{"_index":423,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategy/local.strategy.ts",{"_index":430,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/local.strategy.ts:13",{"_index":434,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategy/local.strategy.ts:8",{"_index":432,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/category/category.controller.ts",{"_index":298,"title":{},"body":{"controllers/CategoryController.html":{},"coverage.html":{}}}],["src/category/category.controller.ts:24",{"_index":304,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:29",{"_index":305,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:34",{"_index":308,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:39",{"_index":311,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:45",{"_index":318,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:54",{"_index":314,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.module.ts",{"_index":340,"title":{},"body":{"modules/CategoryModule.html":{}}}],["src/category/category.service.ts",{"_index":345,"title":{},"body":{"injectables/CategoryService.html":{},"coverage.html":{}}}],["src/category/category.service.ts:14",{"_index":350,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:20",{"_index":351,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:24",{"_index":354,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:28",{"_index":353,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:32",{"_index":356,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:36",{"_index":355,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:9",{"_index":348,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/dto/create",{"_index":366,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/category/dto/update",{"_index":515,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/category/schemas/category.schema.ts",{"_index":265,"title":{},"body":{"classes/Category.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/category/schemas/category.schema.ts:13",{"_index":276,"title":{},"body":{"classes/Category.html":{}}}],["src/category/schemas/category.schema.ts:16",{"_index":278,"title":{},"body":{"classes/Category.html":{}}}],["src/category/schemas/category.schema.ts:19",{"_index":279,"title":{},"body":{"classes/Category.html":{}}}],["src/category/schemas/category.schema.ts:22",{"_index":277,"title":{},"body":{"classes/Category.html":{}}}],["src/category/schemas/category.schema.ts:25",{"_index":273,"title":{},"body":{"classes/Category.html":{}}}],["src/main.ts",{"_index":549,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/question/dto/create",{"_index":380,"title":{},"body":{"classes/CreateQuestionDto.html":{},"coverage.html":{}}}],["src/question/dto/update",{"_index":520,"title":{},"body":{"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["src/question/question.controller.ts",{"_index":451,"title":{},"body":{"controllers/QuestionController.html":{},"coverage.html":{}}}],["src/question/question.controller.ts:24",{"_index":454,"title":{},"body":{"controllers/QuestionController.html":{}}}],["src/question/question.controller.ts:29",{"_index":455,"title":{},"body":{"controllers/QuestionController.html":{}}}],["src/question/question.controller.ts:34",{"_index":456,"title":{},"body":{"controllers/QuestionController.html":{}}}],["src/question/question.controller.ts:40",{"_index":461,"title":{},"body":{"controllers/QuestionController.html":{}}}],["src/question/question.controller.ts:49",{"_index":458,"title":{},"body":{"controllers/QuestionController.html":{}}}],["src/question/question.module.ts",{"_index":474,"title":{},"body":{"modules/QuestionModule.html":{}}}],["src/question/question.service.ts",{"_index":477,"title":{},"body":{"injectables/QuestionService.html":{},"coverage.html":{}}}],["src/question/question.service.ts:13",{"_index":481,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/question/question.service.ts:20",{"_index":482,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/question/question.service.ts:24",{"_index":483,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/question/question.service.ts:28",{"_index":485,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/question/question.service.ts:32",{"_index":484,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/question/question.service.ts:9",{"_index":479,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/question/schemas/question.schema.ts",{"_index":436,"title":{},"body":{"classes/Question.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/question/schemas/question.schema.ts:12",{"_index":442,"title":{},"body":{"classes/Question.html":{}}}],["src/question/schemas/question.schema.ts:15",{"_index":437,"title":{},"body":{"classes/Question.html":{}}}],["src/question/schemas/question.schema.ts:18",{"_index":439,"title":{},"body":{"classes/Question.html":{}}}],["src/question/schemas/question.schema.ts:21",{"_index":438,"title":{},"body":{"classes/Question.html":{}}}],["src/question/schemas/question.schema.ts:6",{"_index":441,"title":{},"body":{"classes/Question.html":{}}}],["src/question/schemas/question.schema.ts:9",{"_index":443,"title":{},"body":{"classes/Question.html":{}}}],["src/throttler",{"_index":497,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{},"coverage.html":{}}}],["start",{"_index":611,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":614,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":616,"title":{},"body":{"index.html":{}}}],["started",{"_index":590,"title":{"index.html":{}},"body":{}}],["starter",{"_index":603,"title":{},"body":{"index.html":{}}}],["starttime",{"_index":398,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["statements",{"_index":537,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":638,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":46,"title":{},"body":{"injectables/AdminStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["strategy/admin.strategy",{"_index":212,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy/jwt.strategy",{"_index":210,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy/local.strategy",{"_index":211,"title":{},"body":{"modules/AuthModule.html":{}}}],["string",{"_index":78,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/Question.html":{},"classes/SigninAuthDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"classes/TokenDto.html":{},"classes/User.html":{}}}],["super",{"_index":57,"title":{},"body":{"injectables/AdminStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":629,"title":{},"body":{"index.html":{},"modules.html":{}}}],["survey",{"_index":445,"title":{},"body":{"classes/Question.html":{}}}],["svg",{"_index":649,"title":{},"body":{"modules.html":{}}}],["table",{"_index":552,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":551,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["test(@req",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["test(req",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["test(token",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["test:covsupport",{"_index":621,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":620,"title":{},"body":{"index.html":{}}}],["tests",{"_index":618,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":627,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":89,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.create(createuserdto",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.findall",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.findone(id",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.remove(+id",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(signinauthdto",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{}}}],["this.categorymodel",{"_index":359,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categorymodel.deleteone",{"_index":365,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categorymodel.find",{"_index":361,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categorymodel.findone",{"_index":363,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categorymodel.updateone",{"_index":364,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryservice.create(createcategorydto",{"_index":325,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findall",{"_index":326,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findlowrank(precedence",{"_index":330,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findone(num",{"_index":328,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.remove(num",{"_index":336,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.update(num",{"_index":333,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.encryptionpassword(createuserdto",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.findall()).length",{"_index":358,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/QuestionService.html":{}}}],["this.jwtservise.sign(payload",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.questionmodel",{"_index":487,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.questionmodel.deleteone",{"_index":492,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.questionmodel.find",{"_index":489,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.questionmodel.findone",{"_index":490,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.questionmodel.updateone",{"_index":491,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.questionservice.create(createquestiondto",{"_index":466,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.findall",{"_index":467,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.findone(num",{"_index":468,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.remove(num",{"_index":470,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.update(num",{"_index":469,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.usermodel(user",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usermodel.find",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usermodel.findone",{"_index":65,"title":{},"body":{"injectables/AdminStrategy.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["throttler",{"_index":83,"title":{},"body":{"controllers/AppController.html":{}}}],["throttlerbehindproxyguard",{"_index":82,"title":{"injectables/ThrottlerBehindProxyGuard.html":{}},"body":{"controllers/AppController.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"coverage.html":{}}}],["throttlerguard",{"_index":499,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["throttlermodule",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forroot",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["throw",{"_index":66,"title":{},"body":{"injectables/AdminStrategy.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["timestamps",{"_index":281,"title":{},"body":{"classes/Category.html":{},"classes/User.html":{}}}],["title",{"_index":270,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateQuestionDto.html":{},"classes/Question.html":{}}}],["tojson",{"_index":286,"title":{},"body":{"classes/Category.html":{},"classes/User.html":{}}}],["token",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokendto",{"_index":237,"title":{"classes/TokenDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["touch",{"_index":639,"title":{},"body":{"index.html":{}}}],["transform",{"_index":287,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/User.html":{}}}],["transformer",{"_index":374,"title":{},"body":{"classes/CreateCategoryDto.html":{},"dependencies.html":{}}}],["translation",{"_index":446,"title":{},"body":{"classes/Question.html":{}}}],["true",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"classes/Category.html":{},"classes/Question.html":{},"classes/User.html":{}}}],["ttl",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["twitter",{"_index":645,"title":{},"body":{"index.html":{}}}],["type",{"_index":32,"title":{},"body":{"injectables/AdminStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/SigninAuthDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"classes/TokenDto.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":654,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":518,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateQuestionDto.html":{},"dependencies.html":{}}}],["types/bcryptjs",{"_index":562,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":564,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":602,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":41,"title":{},"body":{"injectables/AdminStrategy.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('login",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('not",{"_index":69,"title":{},"body":{"injectables/AdminStrategy.html":{}}}],["unique",{"_index":444,"title":{},"body":{"classes/Question.html":{},"classes/User.html":{}}}],["unit",{"_index":617,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":39,"title":{},"body":{"injectables/AdminStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/JwtStrategy.html":{},"injectables/QuestionService.html":{}}}],["update",{"_index":300,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["update(num",{"_index":315,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["updatecategorydto",{"_index":316,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updatedat",{"_index":283,"title":{},"body":{"classes/Category.html":{},"classes/User.html":{}}}],["updatequestiondto",{"_index":459,"title":{"classes/UpdateQuestionDto.html":{}},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["useguards",{"_index":79,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/QuestionController.html":{}}}],["useguards(adminauthguard",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/QuestionController.html":{}}}],["useguards(adminauthguard)@delete(':num",{"_index":457,"title":{},"body":{"controllers/QuestionController.html":{}}}],["useguards(adminauthguard)@patch(':num",{"_index":460,"title":{},"body":{"controllers/QuestionController.html":{}}}],["useguards(adminauthguard)@post",{"_index":453,"title":{},"body":{"controllers/QuestionController.html":{}}}],["useguards(jwtauthguard",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/QuestionController.html":{}}}],["useguards(localauthguard",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(throttlerbehindproxyguard",{"_index":86,"title":{},"body":{"controllers/AppController.html":{}}}],["user",{"_index":49,"title":{"classes/User.html":{}},"body":{"injectables/AdminStrategy.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"coverage.html":{}}}],["user.dto",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["user.dto.ts",{"_index":395,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:17",{"_index":403,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":411,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":407,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:29",{"_index":412,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:32",{"_index":399,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":406,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:38",{"_index":413,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:41",{"_index":401,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:45",{"_index":405,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.isadmin",{"_index":68,"title":{},"body":{"injectables/AdminStrategy.html":{},"injectables/AuthService.html":{}}}],["user.name",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{}}}],["user.password",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdocument",{"_index":50,"title":{},"body":{"injectables/AdminStrategy.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["usermodel",{"_index":34,"title":{},"body":{"injectables/AdminStrategy.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["username",{"_index":523,"title":{},"body":{"classes/User.html":{}}}],["userschema",{"_index":206,"title":{},"body":{"modules/AuthModule.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["validate",{"_index":24,"title":{},"body":{"injectables/AdminStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":35,"title":{},"body":{"injectables/AdminStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["validate(signinauthdto",{"_index":433,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validator",{"_index":378,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/SigninAuthDto.html":{},"classes/TokenDto.html":{},"dependencies.html":{}}}],["value",{"_index":662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":545,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":660,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["versionkey",{"_index":284,"title":{},"body":{"classes/Category.html":{},"classes/User.html":{}}}],["void",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["watch",{"_index":612,"title":{},"body":{"index.html":{}}}],["website",{"_index":643,"title":{},"body":{"index.html":{}}}],["world",{"_index":129,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":632,"title":{},"body":{"index.html":{}}}],["z\\d!@#$%^&*()]{8,30",{"_index":410,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SigninAuthDto.html":{}}}],["za",{"_index":409,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SigninAuthDto.html":{}}}],["zoom",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/QuestionModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AdminAuthGuard.html":{"url":"injectables/AdminAuthGuard.html","title":"injectable - AdminAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/gaurds/admin-auth.gaurd.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class AdminAuthGuard extends AuthGuard('admin') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminStrategy.html":{"url":"injectables/AdminStrategy.html","title":"injectable - AdminStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/admin.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/admin.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategy/admin.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, UnauthorizedException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { User, UserDocument } from '../schemas/user.schema';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class AdminStrategy extends PassportStrategy(Strategy, 'admin') {\n  constructor(@InjectModel(User.name) private userModel: Model) {\n    super({\n      secretOrKey: process.env.JWT_SECRET,\n      // secretOrKey: 'a',\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n    });\n  }\n\n  async validate(payload) {\n    const { id } = payload;\n    const user: User = await this.userModel.findOne({ id });\n    if (!user) {\n      throw new UnauthorizedException();\n    } else if (!user.isAdmin) {\n      throw new UnauthorizedException('Not Admin!!');\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseGuards } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { ThrottlerBehindProxyGuard } from './throttler-behind-proxy.guard';\n\n@UseGuards(ThrottlerBehindProxyGuard)\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nQuestionModule\n\nQuestionModule\n\nAppModule -->\n\nQuestionModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CategoryModule\n                        \n                        \n                            QuestionModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ThrottlerModule } from '@nestjs/throttler';\nimport { AuthModule } from './auth/auth.module';\nimport { QuestionModule } from './question/question.module';\nimport { CategoryModule } from './category/category.module';\nimport * as path from 'path';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      envFilePath: [`${path.resolve()}/env/.${process.env.NODE_ENV}.env`],\n      isGlobal: true,\n      cache: true,\n    }),\n    MongooseModule.forRoot(process.env.DATABASE_URL),\n    ThrottlerModule.forRoot({\n      ttl: 60,\n      limit: 10,\n    }),\n\n    AuthModule,\n\n    QuestionModule,\n\n    CategoryModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                admintest\n                            \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                    Async\n                                signin\n                            \n                            \n                                test\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        admintest\n                        \n                    \n                \n            \n            \n                \nadmintest(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/admintests')@UseGuards(AdminAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signin\n                        \n                    \n                \n            \n            \n                \n                    \n                    signin(signinAuthDto: SigninAuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signin')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signinAuthDto\n                                    \n                                                SigninAuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        test\n                        \n                    \n                \n            \n            \n                \ntest(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/tests')@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Logger,\n  Req,\n  Request,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { AuthService } from './auth.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { SigninAuthDto } from './dto/signin-auth.dto';\nimport { AdminAuthGuard } from './gaurds/admin-auth.gaurd';\nimport { JwtAuthGuard } from './gaurds/jwt-auth.gaurd';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('/signup')\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.authService.create(createUserDto);\n  }\n\n  @Post('/signin')\n  // @UseGuards(LocalAuthGuard)\n  async signin(@Body() signinAuthDto: SigninAuthDto) {\n    return await this.authService.signin(signinAuthDto);\n  }\n\n  @Post('/tests')\n  @UseGuards(JwtAuthGuard)\n  test(@Req() req) {\n    console.log(req);\n  }\n\n  @Post('/admintests')\n  @UseGuards(AdminAuthGuard)\n  admintest(@Req() req) {\n    console.log(req);\n  }\n\n  @Get()\n  findAll() {\n    return this.authService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.authService.findOne(id);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.authService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAdminStrategy \n\nAdminStrategy \n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAdminStrategy  -->\n\nAuthModule->AdminStrategy \n\n\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAdminStrategy\n\nAdminStrategy\n\nAuthModule -->\n\nAdminStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AdminStrategy\n                        \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AdminStrategy\n                        \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './schemas/user.schema';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './strategy/jwt.strategy';\nimport { LocalStrategy } from './strategy/local.strategy';\nimport { ConfigModule } from '@nestjs/config';\nimport * as path from 'path';\nimport { AdminStrategy } from './strategy/admin.strategy';\n\n@Module({\n  imports: [\n    //왠지 모르겟지만 env가 안 읽힘 그래서 다 해줘야하는듯\n    ConfigModule.forRoot({\n      envFilePath: [`${path.resolve()}/env/.${process.env.NODE_ENV}.env`],\n    }),\n    PassportModule,\n    JwtModule.register({\n      secret: process.env.JWT_SECRET,\n      signOptions: {\n        expiresIn: '10h',\n      },\n    }),\n    MongooseModule.forFeature([{ schema: UserSchema, name: User.name }]),\n  ],\n\n  controllers: [AuthController],\n  providers: [AuthService, LocalStrategy, JwtStrategy, AdminStrategy],\n  exports: [AuthService, AdminStrategy, PassportModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                encryptionPassword\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                    Async\n                                signin\n                            \n                            \n                                    Async\n                                test\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, jwtServise: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtServise\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        encryptionPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    encryptionPassword(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signin\n                        \n                    \n                \n            \n            \n                \n                    \n                    signin(signinAuthDto: SigninAuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signinAuthDto\n                                    \n                                                SigninAuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        test\n                        \n                    \n                \n            \n            \n                \n                    \n                    test(token: TokenDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                TokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, UnauthorizedException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { TokenDto } from './dto/token.dto';\nimport { User, UserDocument } from './schemas/user.schema';\nimport { Model } from 'mongoose';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { SigninAuthDto } from './dto/signin-auth.dto';\nimport * as bcrypt from 'bcryptjs';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectModel(User.name) private userModel: Model,\n    private jwtServise: JwtService,\n  ) {}\n\n  async create(createUserDto: CreateUserDto): Promise {\n    const user = await this.encryptionPassword(createUserDto);\n    const createUser = new this.userModel(user);\n    return await createUser.save();\n  }\n\n  async encryptionPassword(createUserDto: CreateUserDto) {\n    const { password } = createUserDto;\n    const salt = await bcrypt.genSalt();\n    const hashedPassword = await bcrypt.hash(password, salt);\n    return { ...createUserDto, password: hashedPassword };\n  }\n\n  async signin(signinAuthDto: SigninAuthDto): Promise {\n    const { password, id } = signinAuthDto;\n    const user = await this.userModel.findOne({ id });\n    if (user && (await bcrypt.compare(password, user.password))) {\n      // 토큰 생성\n\n      const payload = { id, isAdmin: user.isAdmin };\n\n      const accessToken = await this.jwtServise.sign(payload);\n      return { accessToken };\n    } else {\n      throw new UnauthorizedException('Login fail');\n    }\n  }\n\n  async test(token: TokenDto): Promise {\n    return;\n  }\n\n  async findAll(): Promise {\n    return this.userModel.find();\n  }\n\n  async findOne(id: string) {\n    const user: User = await this.userModel.findOne({ id });\n    return user;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} auth`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Category.html":{"url":"classes/Category.html","title":"class - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/schemas/category.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isEnd\n                            \n                            \n                                num\n                            \n                            \n                                precedence\n                            \n                            \n                                title\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isEnd\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/category/schemas/category.schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        num\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({auto: true, index: true, _id: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/category/schemas/category.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        precedence\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/category/schemas/category.schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/category/schemas/category.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/category/schemas/category.schema.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\n@Schema({\n  timestamps: { createdAt: true, updatedAt: true },\n  versionKey: false,\n  toJSON: {\n    transform: function (doc, ret) {\n      delete ret._id;\n    },\n  },\n})\nexport class Category {\n  @Prop({ auto: true, index: true, _id: true })\n  num: number;\n\n  @Prop()\n  title: string;\n\n  @Prop()\n  type: number;\n\n  @Prop()\n  precedence: number;\n\n  @Prop()\n  isEnd: boolean;\n}\nexport const CategorySchema = SchemaFactory.createForClass(Category);\n\nexport type CategoryDocument = Category & Document;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoryController.html":{"url":"controllers/CategoryController.html","title":"controller - CategoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                category\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                findRowRank\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createCategoryDto: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(AdminAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(num: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':num')\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    num\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findRowRank\n                        \n                    \n                \n            \n            \n                \nfindRowRank(precedence: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/low/:precedence')\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    precedence\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(num: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':num')@UseGuards(AdminAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    num\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(num: number, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':num')@UseGuards(AdminAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    num\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n} from '@nestjs/common';\nimport { AdminAuthGuard } from 'src/auth/gaurds/admin-auth.gaurd';\nimport { JwtAuthGuard } from 'src/auth/gaurds/jwt-auth.gaurd';\nimport { CategoryService } from './category.service';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\n\n@Controller('category')\n@UseGuards(JwtAuthGuard)\nexport class CategoryController {\n  constructor(private readonly categoryService: CategoryService) {}\n\n  @Post()\n  @UseGuards(AdminAuthGuard)\n  create(@Body() createCategoryDto: CreateCategoryDto) {\n    return this.categoryService.create(createCategoryDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.categoryService.findAll();\n  }\n\n  @Get(':num')\n  findOne(@Param('num') num: number) {\n    return this.categoryService.findOne(num);\n  }\n\n  @Get('/low/:precedence')\n  findRowRank(@Param('precedence') precedence: number) {\n    return this.categoryService.findLowRank(precedence);\n  }\n\n  @Patch(':num')\n  @UseGuards(AdminAuthGuard)\n  update(\n    @Param('num') num: number,\n    @Body() updateCategoryDto: UpdateCategoryDto,\n  ) {\n    return this.categoryService.update(num, updateCategoryDto);\n  }\n\n  @Delete(':num')\n  @UseGuards(AdminAuthGuard)\n  remove(@Param('num') num: number) {\n    return this.categoryService.remove(num);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoryModule.html":{"url":"modules/CategoryModule.html","title":"module - CategoryModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\ncluster_CategoryModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryModule -->\n\nAuthModule->CategoryModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/category/category.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoryController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CategoryService } from './category.service';\nimport { CategoryController } from './category.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Category, CategorySchema } from './schemas/category.schema';\nimport { PassportModule } from '@nestjs/passport';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { schema: CategorySchema, name: Category.name },\n    ]),\n    AuthModule,\n  ],\n  controllers: [CategoryController],\n  providers: [CategoryService],\n})\nexport class CategoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryService.html":{"url":"injectables/CategoryService.html","title":"injectable - CategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findLowRank\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/category/category.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCategoryDto: CreateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findLowRank\n                        \n                    \n                \n            \n            \n                \n                    \n                    findLowRank(precedence: number)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    precedence\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(num: number)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    num\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(num: number)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    num\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(num: number, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    num\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, UseGuards } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport { Category, CategoryDocument } from './schemas/category.schema';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class CategoryService {\n  constructor(\n    @InjectModel(Category.name) private categoryModel: Model,\n  ) {}\n\n  async create(createCategoryDto: CreateCategoryDto): Promise {\n    const num = (await this.findAll()).length;\n    const category = new this.categoryModel({ ...createCategoryDto, num });\n    return await category.save();\n  }\n\n  async findAll(): Promise {\n    return this.categoryModel.find({}, {}, { sort: 'num' });\n  }\n\n  async findOne(num: number): Promise {\n    return this.categoryModel.findOne({ num });\n  }\n\n  async findLowRank(precedence: number): Promise {\n    return this.categoryModel.findOne({ precedence });\n  }\n\n  async update(num: number, updateCategoryDto: UpdateCategoryDto) {\n    return await this.categoryModel.updateOne({ num }, updateCategoryDto);\n  }\n\n  async remove(num: number) {\n    return await this.categoryModel.deleteOne({ num });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/dto/create-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                isEnd\n                            \n                            \n                                    Readonly\n                                precedence\n                            \n                            \n                                    Readonly\n                                title\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        isEnd\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/category/dto/create-category.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        precedence\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/category/dto/create-category.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/category/dto/create-category.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/category/dto/create-category.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Transform } from 'class-transformer';\nimport {\n  IsBooleanString,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n} from 'class-validator';\n\nexport class CreateCategoryDto {\n  @IsString()\n  @IsNotEmpty()\n  readonly title: string;\n\n  @IsNotEmpty()\n  readonly type: number;\n\n  @IsNotEmpty()\n  readonly precedence: number;\n\n  @IsNotEmpty()\n  readonly isEnd: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQuestionDto.html":{"url":"classes/CreateQuestionDto.html","title":"class - CreateQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question/dto/create-question.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bigCategory\n                            \n                            \n                                endCategory\n                            \n                            \n                                middleCategory\n                            \n                            \n                                num\n                            \n                            \n                                question\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bigCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/question/dto/create-question.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/question/dto/create-question.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        middleCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/question/dto/create-question.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        num\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/question/dto/create-question.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Problem\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/question/dto/create-question.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/question/dto/create-question.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { Problem } from '../schemas/question.schema';\n\nexport class CreateQuestionDto {\n  @IsNotEmpty()\n  num: number;\n  @IsString()\n  title: string;\n  @IsNotEmpty()\n  question: Problem;\n  @IsNotEmpty()\n  bigCategory: number;\n  @IsNotEmpty()\n  middleCategory: number;\n  @IsNotEmpty()\n  endCategory: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                bigCategory\n                            \n                            \n                                    Readonly\n                                endTime\n                            \n                            \n                                    Readonly\n                                id\n                            \n                            \n                                    Readonly\n                                isAdmin\n                            \n                            \n                                    Readonly\n                                middleCategory\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                phoneNum\n                            \n                            \n                                    Readonly\n                                startTime\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        bigCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        endTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(2)@MaxLength(20)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        isAdmin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsBooleanString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        middleCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Matches(/^[A-Za-z\\d!@#$%^&*()]{8,30}$/)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        phoneNum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        startTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:38\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBooleanString,\n  IsDate,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(2)\n  @MaxLength(20)\n  readonly id: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[A-Za-z\\d!@#$%^&*()]{8,30}$/)\n  readonly password: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly name: string;\n\n  @IsNotEmpty()\n  readonly phoneNum: number;\n\n  @IsNotEmpty()\n  readonly bigCategory: number;\n\n  @IsNotEmpty()\n  readonly middleCategory: number;\n\n  @IsNotEmpty()\n  readonly startTime: Date;\n\n  @IsNotEmpty()\n  readonly endTime: Date;\n\n  @IsNotEmpty()\n  @IsBooleanString()\n  readonly isAdmin: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/gaurds/jwt-auth.gaurd.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategy/jwt.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, UnauthorizedException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { User, UserDocument } from '../schemas/user.schema';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(@InjectModel(User.name) private userModel: Model) {\n    super({\n      secretOrKey: process.env.JWT_SECRET,\n      // secretOrKey: 'a',\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n    });\n    console.log();\n  }\n\n  async validate(payload) {\n    Logger.log('start');\n    const { id } = payload;\n    const user: User = await this.userModel.findOne({ id });\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/gaurds/local-auth.gaurd.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(signinAuthDto: SigninAuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategy/local.strategy.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signinAuthDto\n                                    \n                                                SigninAuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\nimport { SigninAuthDto } from '../dto/signin-auth.dto';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthService) {\n    super();\n  }\n\n  async validate(signinAuthDto: SigninAuthDto): Promise {\n    const user = await this.authService.signin(signinAuthDto);\n    if (!user) {\n      throw new UnauthorizedException('??');\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Question.html":{"url":"classes/Question.html","title":"class - Question","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Question\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question/schemas/question.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bigCategory\n                            \n                            \n                                endCategory\n                            \n                            \n                                middleCategory\n                            \n                            \n                                num\n                            \n                            \n                                question\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bigCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/question/schemas/question.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/question/schemas/question.schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        middleCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/question/schemas/question.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        num\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/question/schemas/question.schema.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Problem\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/question/schemas/question.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/question/schemas/question.schema.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\n\n@Schema()\nexport class Question {\n  @Prop({ unique: true })\n  num: number;\n\n  @Prop()\n  title: string;\n\n  @Prop({})\n  question: Problem;\n\n  @Prop()\n  bigCategory: number;\n\n  @Prop()\n  middleCategory: number;\n\n  @Prop()\n  endCategory: number;\n}\n\nexport type Problem = {\n  survey: string[];\n  translation: string[];\n};\n\nexport const QuestionSchema = SchemaFactory.createForClass(Question);\n\nexport type QuestionDocument = Question & Document;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QuestionController.html":{"url":"controllers/QuestionController.html","title":"controller - QuestionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QuestionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question/question.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                question\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createQuestionDto: CreateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AdminAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/question/question.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionDto\n                                    \n                                                CreateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/question/question.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(num: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':num')\n                \n            \n\n            \n                \n                    Defined in src/question/question.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    num\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(num: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AdminAuthGuard)@Delete(':num')\n                \n            \n\n            \n                \n                    Defined in src/question/question.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    num\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(num: number, updateQuestionDto: UpdateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AdminAuthGuard)@Patch(':num')\n                \n            \n\n            \n                \n                    Defined in src/question/question.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    num\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateQuestionDto\n                                    \n                                                UpdateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n} from '@nestjs/common';\nimport { QuestionService } from './question.service';\nimport { CreateQuestionDto } from './dto/create-question.dto';\nimport { UpdateQuestionDto } from './dto/update-question.dto';\nimport { JwtAuthGuard } from 'src/auth/gaurds/jwt-auth.gaurd';\nimport { AdminAuthGuard } from 'src/auth/gaurds/admin-auth.gaurd';\n\n@Controller('question')\n@UseGuards(JwtAuthGuard)\nexport class QuestionController {\n  constructor(private readonly questionService: QuestionService) {}\n\n  @UseGuards(AdminAuthGuard)\n  @Post()\n  create(@Body() createQuestionDto: CreateQuestionDto) {\n    return this.questionService.create(createQuestionDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.questionService.findAll();\n  }\n\n  @Get(':num')\n  findOne(@Param('num') num: number) {\n    return this.questionService.findOne(num);\n  }\n\n  @UseGuards(AdminAuthGuard)\n  @Patch(':num')\n  update(\n    @Param('num') num: number,\n    @Body() updateQuestionDto: UpdateQuestionDto,\n  ) {\n    return this.questionService.update(num, updateQuestionDto);\n  }\n\n  @UseGuards(AdminAuthGuard)\n  @Delete(':num')\n  remove(@Param('num') num: number) {\n    return this.questionService.remove(num);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QuestionModule.html":{"url":"modules/QuestionModule.html","title":"module - QuestionModule","body":"\n                   \n\n\n\n\n    Modules\n    QuestionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_QuestionModule\n\n\n\ncluster_QuestionModule_providers\n\n\n\ncluster_QuestionModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nQuestionModule\n\nQuestionModule\n\nQuestionModule -->\n\nAuthModule->QuestionModule\n\n\n\n\n\nQuestionService\n\nQuestionService\n\nQuestionModule -->\n\nQuestionService->QuestionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/question/question.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QuestionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QuestionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { QuestionService } from './question.service';\nimport { QuestionController } from './question.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Question, QuestionSchema } from './schemas/question.schema';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { schema: QuestionSchema, name: Question.name },\n    ]),\n    AuthModule,\n  ],\n  controllers: [QuestionController],\n  providers: [QuestionService],\n})\nexport class QuestionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuestionService.html":{"url":"injectables/QuestionService.html","title":"injectable - QuestionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QuestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question/question.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(questionModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/question/question.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        questionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createQuestionDto: CreateQuestionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/question/question.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionDto\n                                    \n                                                CreateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/question/question.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(num: number)\n                \n            \n\n\n            \n                \n                    Defined in src/question/question.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    num\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(num: number)\n                \n            \n\n\n            \n                \n                    Defined in src/question/question.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    num\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(num: number, updateQuestionDto: UpdateQuestionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/question/question.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    num\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateQuestionDto\n                                    \n                                                UpdateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateQuestionDto } from './dto/create-question.dto';\nimport { UpdateQuestionDto } from './dto/update-question.dto';\nimport { Question, QuestionDocument } from './schemas/question.schema';\n\n@Injectable()\nexport class QuestionService {\n  constructor(\n    @InjectModel(Question.name) private questionModel: Model,\n  ) {}\n  async create(createQuestionDto: CreateQuestionDto): Promise {\n    const num = (await this.findAll()).length;\n    const question = new this.questionModel({ ...createQuestionDto, num });\n\n    return await question.save();\n  }\n\n  async findAll(): Promise {\n    return this.questionModel.find();\n  }\n\n  async findOne(num: number): Promise {\n    return this.questionModel.findOne({ num });\n  }\n\n  async update(num: number, updateQuestionDto: UpdateQuestionDto) {\n    return await this.questionModel.updateOne({ num }, updateQuestionDto);\n  }\n\n  async remove(num: number) {\n    return await this.questionModel.deleteOne({ num });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SigninAuthDto.html":{"url":"classes/SigninAuthDto.html","title":"class - SigninAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SigninAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/signin-auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                id\n                            \n                            \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/signin-auth.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Matches(/^[A-Za-z\\d!@#$%^&*()]{8,30}$/)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/signin-auth.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, Matches } from 'class-validator';\n\nexport class SigninAuthDto {\n  @IsString()\n  @IsNotEmpty()\n  readonly id: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[A-Za-z\\d!@#$%^&*()]{8,30}$/)\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ThrottlerBehindProxyGuard.html":{"url":"injectables/ThrottlerBehindProxyGuard.html","title":"injectable - ThrottlerBehindProxyGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ThrottlerBehindProxyGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/throttler-behind-proxy.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ThrottlerGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                getTracker\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        getTracker\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTracker(req: Record)\n                \n            \n\n\n            \n                \n                    Defined in src/throttler-behind-proxy.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ThrottlerGuard } from '@nestjs/throttler';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class ThrottlerBehindProxyGuard extends ThrottlerGuard {\n  protected getTracker(req: Record): string {\n    return req.ips.length ? req.ips[0] : req.ip; // individualize IP extraction to meet your own needs\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenDto.html":{"url":"classes/TokenDto.html","title":"class - TokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                accessToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class TokenDto {\n  @IsString()\n  @IsNotEmpty()\n  readonly accessToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/dto/update-category.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateCategoryDto } from './create-category.dto';\n\nexport class UpdateCategoryDto extends PartialType(CreateCategoryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQuestionDto.html":{"url":"classes/UpdateQuestionDto.html","title":"class - UpdateQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question/dto/update-question.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateQuestionDto } from './create-question.dto';\n\nexport class UpdateQuestionDto extends PartialType(CreateQuestionDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bigCategory\n                            \n                            \n                                endTime\n                            \n                            \n                                id\n                            \n                            \n                                isAdmin\n                            \n                            \n                                middleCategory\n                            \n                            \n                                password\n                            \n                            \n                                phoneNum\n                            \n                            \n                                startTime\n                            \n                            \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bigCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/schemas/user.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/schemas/user.schema.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/schemas/user.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isAdmin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/schemas/user.schema.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        middleCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/schemas/user.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/schemas/user.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/schemas/user.schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/schemas/user.schema.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/schemas/user.schema.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\n\n@Schema({\n  versionKey: false,\n  toJSON: {\n    transform: function (doc, ret) {\n      delete ret._id;\n    },\n  },\n  timestamps: { createdAt: true, updatedAt: true },\n})\nexport class User {\n  @Prop({ unique: true })\n  id: string;\n\n  @Prop()\n  password: string;\n\n  @Prop()\n  userName: string;\n\n  @Prop()\n  phoneNum: number;\n\n  @Prop()\n  bigCategory: number;\n\n  @Prop()\n  middleCategory: number;\n\n  @Prop()\n  startTime: Date;\n\n  @Prop()\n  endTime: Date;\n\n  @Prop()\n  isAdmin: boolean;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\nexport type UserDocument = User & Document;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/auth/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auth/dto/signin-auth.dto.ts\n            \n            class\n            SigninAuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/token.dto.ts\n            \n            class\n            TokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/gaurds/admin-auth.gaurd.ts\n            \n            injectable\n            AdminAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/gaurds/jwt-auth.gaurd.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/gaurds/local-auth.gaurd.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/schemas/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auth/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/strategy/admin.strategy.ts\n            \n            injectable\n            AdminStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategy/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategy/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/category/category.controller.ts\n            \n            controller\n            CategoryController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/category/category.service.ts\n            \n            injectable\n            CategoryService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/category/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/category/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/category/schemas/category.schema.ts\n            \n            class\n            Category\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/category/schemas/category.schema.ts\n            \n            variable\n            CategorySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question/dto/create-question.dto.ts\n            \n            class\n            CreateQuestionDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/question/dto/update-question.dto.ts\n            \n            class\n            UpdateQuestionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question/question.controller.ts\n            \n            controller\n            QuestionController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/question/question.service.ts\n            \n            injectable\n            QuestionService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/question/schemas/question.schema.ts\n            \n            class\n            Question\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/question/schemas/question.schema.ts\n            \n            variable\n            QuestionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/throttler-behind-proxy.guard.ts\n            \n            injectable\n            ThrottlerBehindProxyGuard\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^1.2.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/mongoose : ^9.0.2\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/throttler : ^2.0.0\n        \n            @types/bcryptjs : ^2.4.2\n        \n            @types/passport-local : ^1.0.34\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cross-env : ^7.0.3\n        \n            dotenv : ^16.0.0\n        \n            helmet : ^5.0.2\n        \n            mongoose : ^6.2.2\n        \n            passport : ^0.5.2\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QuestionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\ncluster_QuestionModule\n\n\n\ncluster_QuestionModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryModule -->\n\nAuthModule->CategoryModule\n\n\n\n\n\nQuestionModule\n\nQuestionModule\n\nQuestionModule -->\n\nAuthModule->QuestionModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAdminStrategy \n\nAdminStrategy \n\nAdminStrategy  -->\n\nAuthModule->AdminStrategy \n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\nAppModule -->\n\nQuestionModule->AppModule\n\n\n\n\n\nAdminStrategy\n\nAdminStrategy\n\nAuthModule -->\n\nAdminStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\nQuestionService\n\nQuestionService\n\nQuestionModule -->\n\nQuestionService->QuestionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CategoryDocument   (src/.../category.schema.ts)\n                        \n                        \n                            Problem   (src/.../question.schema.ts)\n                        \n                        \n                            QuestionDocument   (src/.../question.schema.ts)\n                        \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/category/schemas/category.schema.ts\n    \n    \n        \n            \n                \n                    \n                    CategoryDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/question/schemas/question.schema.ts\n    \n    \n        \n            \n                \n                    \n                    Problem\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QuestionDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/auth/schemas/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CategorySchema   (src/.../category.schema.ts)\n                        \n                        \n                            QuestionSchema   (src/.../question.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/category/schemas/category.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CategorySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Category)\n                    \n                \n\n\n        \n    \n\n    src/question/schemas/question.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        QuestionSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Question)\n                    \n                \n\n\n        \n    \n\n    src/auth/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
